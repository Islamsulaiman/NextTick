<!DOCTYPE html>
<html>
  <head>
    <title>Project Tasks</title>
    <style>
      /* Table styles */
      table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1rem;
      }

      th,
      td {
        padding: 0.5rem;
        text-align: left;
        border-bottom: 1px solid #ddd;
      }

      th {
        background-color: #f5f5f5;
        font-weight: bold;
        font-size: 1.2rem;
      }

      /* Button styles */
      button {
        padding: 0.5rem;
        border: none;
        background-color: #4CAF50;
        color: #fff;
        cursor: pointer;
        margin-right: 0.5rem;
        font-size: 1.2rem;
        font-weight: bold;
        border-radius: 0.2rem;
        transition: all 0.3s ease-in-out;
      }

      button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }

      button:hover:not(:disabled) {
        background-color: #3e8e41;
        transform: translateY(-2px);
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
      }

      /* Link styles */
      a {
        color: #4CAF50;
        text-decoration: none;
        transition: all 0.3s ease-in-out;
      }

      a:hover {
        text-decoration: underline;
        color: #3e8e41;
      }

      /* Container styles */
      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
      }

      /* Page title styles */
      h1 {
        margin-top: 0;
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #4CAF50;
        text-shadow: 2px 2px #ddd;
        margin-bottom: 2rem;
      }

      /* Timer styles */
      .timer {
        font-size: 1.2rem;
        font-weight: bold;
      }

      .timer span {
        color: #f44336;
      }

    </style>
  </head>
  <body>
    <div class="container">
      <h1>Project Tasks</h1>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Project ID</th>
            <th>Time Elapsed</th>
            <th>Actions</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <% @tasks.each do |task| %>
            <tr>
              <td><%= task.name %></td>
              <td><%= task.project_id %></td>
              <td class="timer"><span id="elapsed-time-<%= task.id %>"><%= task.time_elapsed %></span> seconds</td>
              <td>
                <button class="start-timer" data-task-id="<%= task.id %>" data-initial-time="<%= task.time_elapsed %>">Start Timer</button>
                <button class="stop-timer" data-task-id="<%= task.id %>" disabled>Stop Timer</button>
              </td>
              <td><%= link_to 'Edit', edit_task_path(task) %></td>
            </tr>
          <% end %>
        </tbody>
      </table>
      <p><%= link_to 'New Task', new_task_path(@task), class: 'btn btn-success' %></p>
    </div>
    <script>
      /* JavaScript code here */
    </script>
  </body>
</html>

<script>
  var currentTimerId = null;
  var timers = {};
  var elapsedTimes = {};

  function stopTimer(taskId) {
    if (!timers[taskId]) {
      return;
    }

    clearInterval(timers[taskId]);
    var startButton = document.querySelector("button.start-timer[data-task-id='" + taskId + "']");
    startButton.disabled = false;
    var stopButton = document.querySelector("button.stop-timer[data-task-id='" + taskId + "']");
    stopButton.disabled = true;

    var elapsedTime = elapsedTimes[taskId];
    var taskEl = document.getElementById("elapsed-time-" + taskId);
    taskEl.textContent = elapsedTime;

    var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");
    var url = "/tasks/" + taskId;

    fetch(url, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": csrfToken
      },
      body: JSON.stringify({ task: { time_elapsed: elapsedTime } })
    })
    .then(function(response) {
      if (response.ok) {
        console.log("Time elapsed updated successfully!");
      } else {
        console.error("Failed to update time elapsed.");
      }
    })
    .catch(function(error) {
      console.error("Failed to update time elapsed:", error);
    });

    currentTimerId = null;
  }

  document.querySelectorAll(".start-timer").forEach(function(startButton) {
    var taskId = startButton.dataset.taskId;
    var initialTime = startButton.dataset.initialTime;

    startButton.addEventListener("click", function() {
      if (currentTimerId) {
        stopTimer(currentTimerId);
      }

      elapsedTimes[taskId] = parseInt(document.getElementById("elapsed-time-" + taskId).textContent || initialTime);
      timers[taskId] = setInterval(function() {
        elapsedTimes[taskId]++;
        document.getElementById("elapsed-time-" + taskId).textContent = elapsedTimes[taskId];

        // Enable the "Stop Timer" button if the counter is working
        var stopButton = document.querySelector("button.stop-timer[data-task-id='" + taskId + "']");
        stopButton.disabled = false;
      }, 1000);

      startButton.disabled = true;
      currentTimerId = taskId;
    });

    var stopButton = startButton.nextElementSibling;
    stopButton.addEventListener("click", function() {
      stopTimer(taskId);
    });
  });
</script>